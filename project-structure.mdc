---
description:
globs:
alwaysApply: false
---
# Project Structure Guide

This project is a RESTful API backend built with Go, Gin, GORM, and PostgreSQL.

## Main Entry Points
- **`cmd/api/main.go`**: Main API server entry point. Loads configuration from environment variables, connects to PostgreSQL database, auto-migrates models, seeds data if configured, and starts the HTTP server on the specified port.
- **`cmd/seeder/main.go`**: Standalone seeder application for populating the database with sample data (users and products).

## Configuration
- **Environment Variables**: The application uses environment variables for configuration. Key variables include:
  - `DB_HOST`, `DB_USER`, `DB_PASSWORD`, `DB_NAME`, `DB_PORT`: PostgreSQL connection settings
  - `JWT_SECRET`: Secret key for JWT token generation and validation
  - `PORT`: Server port (defaults to 8080)
  - `RUN_SEEDER`: Set to "true" to automatically seed data when starting the API

## Key Directories

### `internal/` - Core Application Logic
- **`internal/handlers/`**: HTTP request handlers
  - `auth_handler.go`: Authentication endpoints (register, login, change password)
  - `product_handler.go`: Product management (CRUD operations, image upload)
  - `admin_handler.go`: Admin-only endpoints (user management)
- **`internal/middleware/`**: HTTP middleware
  - `auth.go`: JWT authentication middleware
- **`internal/models/`**: Data models and database schemas
  - `user.go`: User model with authentication fields
  - `product.go`: Product model with inventory management
- **`internal/repository/`**: Data access layer
  - `product_repo.go`: Product database operations
  - `user_repo.go`: User database operations
- **`internal/routes/`**: Route configuration
  - `routes.go`: All API route definitions with middleware and authorization
- **`internal/utils/`**: Utility functions
  - `response.go`: Standardized API response formatting
- **`internal/seeds/`**: Database seeding utilities (currently empty)

### `static/` - Static File Serving
- **`static/uploads/`**: Product images uploaded by admin users, served at `/uploads/<filename>`

## API Endpoints

### Public Routes
- `GET /api/v1/status`: Health check endpoint
- `POST /api/v1/auth/register`: User registration
- `POST /api/v1/auth/login`: User authentication
- `GET /api/v1/products`: List all products (public)
- `GET /api/v1/products/:id`: Get specific product details (public)
- `GET /uploads/<filename>`: Serve uploaded product images

### Protected Routes (Require JWT Authentication)
- `PUT /api/v1/users/change-password`: Change user password

### Admin-Only Routes (Require JWT + Admin Role)
- `POST /api/v1/products`: Create new product
- `PUT /api/v1/products/:id`: Update existing product
- `DELETE /api/v1/products/:id`: Delete product
- `POST /api/v1/products/:id/upload`: Upload product image
- `GET /api/v1/admin/users`: List all users (admin only)

## Technology Stack
- **Framework**: Gin (HTTP web framework)
- **Database**: PostgreSQL with GORM ORM
- **Authentication**: JWT tokens with bcrypt password hashing
- **File Upload**: Static file serving for product images
- **Validation**: Go Playground Validator
- **Configuration**: Environment variables with godotenv

## Development Commands
- **Run API server**: `go run cmd/api/main.go`
- **Seed database**: `go run cmd/seeder/main.go`
- **Auto-seed on startup**: Set `RUN_SEEDER=true` in environment and start the API

## Database Models
- **User**: Username, email, password (hashed), full name, role (admin/user), timestamps
- **Product**: Name, description, price, stock, category, image URL, timestamps

## Security Features
- JWT-based authentication
- Role-based access control (admin/user)
- Password hashing with bcrypt
- Secure file upload handling with security headers
- Input validation and sanitization
